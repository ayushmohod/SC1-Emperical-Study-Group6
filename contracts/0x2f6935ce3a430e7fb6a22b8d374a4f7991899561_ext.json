{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^ 0.4.25;\r\ncontract owned {\r\n    address public owner;\r\n    constructor() public{\r\n    owner = msg.sender;\r\n    }\r\n    /* modifier\u662f\u4fee\u6539\u6807\u5fd7 */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /* \u4fee\u6539\u7ba1\u7406\u5458\u8d26\u6237\uff0c onlyOwner\u4ee3\u8868\u53ea\u80fd\u662f\u7528\u6237\u7ba1\u7406\u5458\u6765\u4fee\u6539 */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }   \r\n}\r\n\r\ncontract BTCC is owned{\r\n    // \u4ee3\u5e01\uff08token\uff09\u7684\u516c\u5171\u53d8\u91cf\r\n    string public name;             //\u4ee3\u5e01\u540d\u5b57\r\n    string public symbol;           //\u4ee3\u5e01\u7b26\u53f7\r\n    uint8 public decimals = 18;     //\u4ee3\u5e01\u5c0f\u6570\u70b9\u4f4d\u6570\uff0c 18\u662f\u9ed8\u8ba4\uff0c \u5c3d\u91cf\u4e0d\u8981\u66f4\u6539\r\n\r\n    uint256 public totalSupply;     //\u4ee3\u5e01\u603b\u91cf\r\n    uint256 public sellPrice = 1 ether;\r\n    uint256 public buyPrice = 1 ether;\r\n\r\n    /* \u51bb\u7ed3\u8d26\u6237 */\r\n    mapping (address => bool) public frozenAccount;\r\n    // \u8bb0\u5f55\u5404\u4e2a\u8d26\u6237\u7684\u4ee3\u5e01\u6570\u76ee\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    // A\u8d26\u6237\u5b58\u5728B\u8d26\u6237\u8d44\u91d1\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // \u8f6c\u8d26\u901a\u77e5\u4e8b\u4ef6\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // \u9500\u6bc1\u91d1\u989d\u901a\u77e5\u4e8b\u4ef6\r\n    event Burn(address indexed from, uint256 value);\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen);\r\n    /* \u6784\u9020\u51fd\u6570 */\r\n    constructor() public {\r\n        totalSupply = 1000000000 ether;  // \u6839\u636edecimals\u8ba1\u7b97\u4ee3\u5e01\u7684\u6570\u91cf\r\n        balanceOf[msg.sender] = totalSupply;                    // \u7ed9\u751f\u6210\u8005\u6240\u6709\u7684\u4ee3\u5e01\u6570\u91cf\r\n        name = 'BTCC';                                       // \u8bbe\u7f6e\u4ee3\u5e01\u7684\u540d\u5b57\r\n        symbol = 'btcc';                                   // \u8bbe\u7f6e\u4ee3\u5e01\u7684\u7b26\u53f7\r\n        emit Transfer(this, msg.sender, totalSupply);\r\n    }\r\n\r\n    /* \u79c1\u6709\u7684\u4ea4\u6613\u51fd\u6570 */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // \u9632\u6b62\u8f6c\u79fb\u52300x0\uff0c \u7528burn\u4ee3\u66ff\u8fd9\u4e2a\u529f\u80fd\r\n        require(_to != 0x0);\r\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n        // \u68c0\u6d4b\u53d1\u9001\u8005\u662f\u5426\u6709\u8db3\u591f\u7684\u8d44\u91d1\r\n        require(balanceOf[_from] >= _value);\r\n        // \u68c0\u67e5\u662f\u5426\u6ea2\u51fa\uff08\u6570\u636e\u7c7b\u578b\u7684\u6ea2\u51fa\uff09\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // \u5c06\u6b64\u4fdd\u5b58\u4e3a\u5c06\u6765\u7684\u65ad\u8a00\uff0c \u51fd\u6570\u6700\u540e\u4f1a\u6709\u4e00\u4e2a\u68c0\u9a8c\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // \u51cf\u5c11\u53d1\u9001\u8005\u8d44\u4ea7\r\n        balanceOf[_from] -= _value;\r\n        // \u589e\u52a0\u63a5\u6536\u8005\u7684\u8d44\u4ea7\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        // \u65ad\u8a00\u68c0\u6d4b\uff0c \u4e0d\u5e94\u8be5\u4e3a\u9519\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /* \u4f20\u9012tokens */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /* \u4ece\u5176\u4ed6\u8d26\u6237\u8f6c\u79fb\u8d44\u4ea7 */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /*  \u6388\u6743\u7b2c\u4e09\u65b9\u4ece\u53d1\u9001\u8005\u8d26\u6237\u8f6c\u79fb\u4ee3\u5e01\uff0c\u7136\u540e\u901a\u8fc7transferFrom()\u51fd\u6570\u6765\u6267\u884c\u7b2c\u4e09\u65b9\u7684\u8f6c\u79fb\u64cd\u4f5c */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * \u9500\u6bc1\u4ee3\u5e01\r\n    */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * \u4ece\u5176\u4ed6\u8d26\u6237\u9500\u6bc1\u4ee3\u5e01\r\n    */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n    // \u51bb\u7ed3 or \u89e3\u51bb\u8d26\u6237\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\r\n        sellPrice = newSellPrice;\r\n        buyPrice = newBuyPrice;\r\n    }\r\n\r\n    /// @notice Buy tokens from contract by sending ether\r\n    function buy() payable public {\r\n        uint amount = msg.value / buyPrice;               // calculates the amount\r\n        require(totalSupply >= amount);\r\n        totalSupply -= amount;\r\n        _transfer(this, msg.sender, amount);              // makes the transfers\r\n    }\r\n\r\n    function sell(uint256 amount) public {\r\n        require(address(this).balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\r\n        _transfer(msg.sender, this, amount);              // makes the transfers\r\n        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\r\n    }\r\n    // \u5411\u6307\u5b9a\u8d26\u6237\u589e\u53d1\u8d44\u91d1\r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n        require(totalSupply >= mintedAmount);\r\n        balanceOf[target] += mintedAmount;\r\n        totalSupply -= mintedAmount;\r\n        emit Transfer(this, target, mintedAmount);\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"}]", "ContractName": "BTCC", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://f8a999dd8ca572a0092f82ff2f7e265ea65de7ed1c6b1e09e3981bd6559950d3"}]}