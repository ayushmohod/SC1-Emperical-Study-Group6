{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.17;\r\n\r\n/*\r\n    Utilities & Common Modifiers\r\n*/\r\ncontract Utils {\r\n    /**\r\n        constructor\r\n    */\r\n    function Utils() public {\r\n    }\r\n\r\n    // verifies that an amount is greater than zero\r\n    modifier greaterThanZero(uint256 _amount) {\r\n        require(_amount > 0);\r\n        _;\r\n    }\r\n\r\n    // validates an address - currently only checks that it isn't null\r\n    modifier validAddress(address _address) {\r\n        require(_address != 0x0);\r\n        _;\r\n    }\r\n\r\n    // verifies that the address is different than this contract address\r\n    modifier notThis(address _address) {\r\n        require(_address != address(this));\r\n        _;\r\n    }\r\n\r\n    // Overflow protected math functions\r\n\r\n    /**\r\n        @dev returns the sum of _x and _y, asserts if the calculation overflows\r\n\r\n        @param _x   value 1\r\n        @param _y   value 2\r\n\r\n        @return sum\r\n    */\r\n    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        uint256 z = _x + _y;\r\n        assert(z >= _x);\r\n        return z;\r\n    }\r\n\r\n    /**\r\n        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\r\n\r\n        @param _x   minuend\r\n        @param _y   subtrahend\r\n\r\n        @return difference\r\n    */\r\n    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        assert(_x >= _y);\r\n        return _x - _y;\r\n    }\r\n\r\n    /**\r\n        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows\r\n\r\n        @param _x   factor 1\r\n        @param _y   factor 2\r\n\r\n        @return product\r\n    */\r\n    function safeMul(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        uint256 z = _x * _y;\r\n        assert(_x == 0 || z / _x == _y);\r\n        return z;\r\n    }\r\n}\r\n\r\ncontract IOwned {\r\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\r\n    function owner() public pure returns (address) {}\r\n\r\n    function transferOwnership(address _newOwner) public;\r\n    function acceptOwnership() public;\r\n}\r\n\r\n\r\n/*\r\n    owned \u662f\u4e00\u4e2a\u7ba1\u7406\u8005\r\n*/\r\ncontract Owned is IOwned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address _prevOwner, address _newOwner);\r\n\r\n    /**\r\n     * \u521d\u59cb\u5316\u6784\u9020\u51fd\u6570\r\n     */\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * \u5224\u65ad\u5f53\u524d\u5408\u7ea6\u8c03\u7528\u8005\u662f\u5426\u662f\u7ba1\u7406\u5458\r\n     */\r\n    modifier onlyOwner {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * \u6307\u6d3e\u4e00\u4e2a\u65b0\u7684\u7ba1\u7406\u5458\r\n     * @param  _newOwner address \u65b0\u7684\u7ba1\u7406\u5458\u5e10\u6237\u5730\u5740\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\ncontract IToken {\r\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\r\n    function name() public pure returns (string) {}\r\n    function symbol() public pure returns (string) {}\r\n    function decimals() public pure returns (uint8) {}\r\n    function totalSupply() public pure returns (uint256) {}\r\n    function balanceOf(address _owner) public pure returns (uint256) { _owner; }\r\n    function allowance(address _owner, address _spender) public pure returns (uint256) { _owner; _spender; }\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal;\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n}\r\n\r\n\r\ncontract Token is IToken, Owned, Utils {\r\n    /* \u516c\u5171\u53d8\u91cf */\r\n    string public standard = '';\r\n    string public name = ''; //\u4ee3\u5e01\u540d\u79f0\r\n    string public symbol = ''; //\u4ee3\u5e01\u7b26\u53f7\u6bd4\u5982'$'\r\n    uint8 public decimals = 0;  //\u4ee3\u5e01\u5355\u4f4d\r\n    uint256 public totalSupply = 0; //\u4ee3\u5e01\u603b\u91cf\r\n\r\n    /*\u8bb0\u5f55\u6240\u6709\u4f59\u989d\u7684\u6620\u5c04*/\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /* \u5728\u533a\u5757\u94fe\u4e0a\u521b\u5efa\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u7528\u4ee5\u901a\u77e5\u5ba2\u6237\u7aef*/\r\n    event Transfer(address indexed from, address indexed to, uint256 value);  //\u8f6c\u5e10\u901a\u77e5\u4e8b\u4ef6\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value); //\u8bbe\u7f6e\u5141\u8bb8\u7528\u6237\u652f\u4ed8\u6700\u5927\u91d1\u989d\u901a\u77e5\r\n\r\n    function Token() public \r\n    {\r\n        name = 'MCNC\u5065\u5eb7\u6811';\r\n        symbol = 'MCNC';\r\n        decimals = 8;\r\n        totalSupply = 2000000000 * 10 ** uint256(decimals);\r\n\r\n        balanceOf[owner] = totalSupply;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _value)\r\n      internal\r\n      validAddress(_from)\r\n      validAddress(_to)\r\n    {\r\n\r\n      require(balanceOf[_from] >= _value);\r\n      require(balanceOf[_to] + _value > balanceOf[_to]);\r\n      uint previousBalances = safeAdd(balanceOf[_from], balanceOf[_to]);\r\n      balanceOf[_from] = safeSub(balanceOf[_from], _value);\r\n      balanceOf[_to] += safeAdd(balanceOf[_to], _value);\r\n\r\n      emit Transfer(_from, _to, _value);\r\n\r\n      assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value)\r\n      public\r\n      validAddress(_to)\r\n      returns (bool)\r\n    {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public\r\n        validAddress(_from)\r\n        validAddress(_to)\r\n        returns (bool)\r\n    {\r\n        //\u68c0\u67e5\u53d1\u9001\u8005\u662f\u5426\u62e5\u6709\u8db3\u591f\u4f59\u989d\u652f\u51fa\u7684\u8bbe\u7f6e\r\n        require(_value <= allowance[_from][msg.sender]);   // Check allowance\r\n\r\n        allowance[_from][msg.sender] -= safeSub(allowance[_from][msg.sender], _value);\r\n\r\n        _transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        validAddress(_spender)\r\n        returns (bool success)\r\n    {\r\n\r\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\r\n\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract IMCNC {\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal;\r\n    function freezeAccount(address target, bool freeze) public;\r\n}\r\n\r\n\r\ncontract SmartToken is Owned, Token {\r\n\r\n    string public version = '1.0';\r\n\r\n    event NewSmartToken(address _token);\r\n\r\n    function SmartToken()\r\n        public\r\n        Token ()\r\n    {\r\n        emit NewSmartToken(address(this));\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract MCNC is IMCNC, Token {\r\n\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    // triggered when a smart token is deployed - the _token address is defined for forward compatibility, in case we want to trigger the event from a factory\r\n    event NewSmartToken(address _token);\r\n\r\n\r\n    function MCNC()\r\n      public\r\n      Token ()\r\n    {\r\n        emit NewSmartToken(address(this));\r\n    }\r\n\r\n\r\n    function _transfer(address _from, address _to, uint _value)\r\n        validAddress(_from)\r\n        validAddress(_to)\r\n        internal\r\n    {\r\n        require (balanceOf[_from] > _value);\r\n        require (balanceOf[_to] + _value > balanceOf[_to]);\r\n        require(!frozenAccount[_from]);\r\n        require(!frozenAccount[_to]);\r\n\r\n        balanceOf[_from] = safeSub(balanceOf[_from], _value);\r\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\r\n\r\n        //\u901a\u77e5\u4efb\u4f55\u76d1\u542c\u8be5\u4ea4\u6613\u7684\u5ba2\u6237\u7aef\r\n        emit Transfer(_from, _to, _value);\r\n\r\n    }\r\n\r\n    function freezeAccount(address target, bool freeze)\r\n        validAddress(target)\r\n        public\r\n        onlyOwner\r\n    {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"NewSmartToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "MCNC", "CompilerVersion": "v0.4.21+commit.dfe3193c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://17f9fd50be96ac718212e924209d3d5bcad280a63a86c0d04953c1f26f8e27c8"}]}