{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      revert();\r\n    }\r\n  }\r\n}\r\ncontract ZTRToken{\r\n    function transfer(address _to, uint val);\r\n}\r\n\r\ncontract ZTRTokenSale\r\n{\r\n    using SafeMath for uint;\r\n    mapping (address => uint) public balanceOf;\r\n    mapping (address => uint) public ethBalance;\r\n    address public owner;\r\n    address ZTRTokenContract;\r\n    uint public fundingGoal;\r\n    uint public fundingMax;\r\n    uint public amountRaised;\r\n    uint public start;\r\n    uint public duration;\r\n    uint public deadline;\r\n    uint public unlockTime;\r\n    uint public ZTR_ETH_initial_price;\r\n    uint public ZTR_ETH_extra_price;\r\n    uint public remaining;\r\n    \r\n    modifier admin { if (msg.sender == owner) _; }\r\n    modifier afterUnlock { if(now>unlockTime) _;}\r\n    modifier afterDeadline { if(now>deadline) _;}\r\n    \r\n    function ZTRTokenSale()\r\n    {\r\n        owner = msg.sender;\r\n        ZTRTokenContract = 0x107bc486966eCdDAdb136463764a8Eb73337c4DF;\r\n        fundingGoal = 5000 ether;//funds will be returned if this goal is not met\r\n        fundingMax = 30000 ether;//The max amount that can be raised\r\n        start = 1517702401;//beginning of the token sale\r\n        duration = 3 weeks;//duration of the token sale\r\n        deadline = start + duration;//end of the token sale\r\n        unlockTime = deadline + 16 weeks;//unlock for selfdestruct\r\n        ZTR_ETH_initial_price = 45000;//initial ztr price\r\n        ZTR_ETH_extra_price = 23000;//ztr price after funding goal has been met\r\n        remaining = 800000000000000000000000000;//counter for remaining tokens\r\n    }\r\n    function () payable public//order processing and crediting to escrow\r\n    {\r\n        require(now>start);\r\n        require(now<deadline);\r\n        require(amountRaised + msg.value < fundingMax);//funding hard cap has not been reached\r\n        uint purchase = msg.value;\r\n        ethBalance[msg.sender] = ethBalance[msg.sender].add(purchase);//track the amount of eth contributed for refunds\r\n        if(amountRaised < fundingGoal)//funding goal has not been met yet\r\n        {\r\n            purchase = purchase.mul(ZTR_ETH_initial_price);\r\n            amountRaised = amountRaised.add(msg.value);\r\n            balanceOf[msg.sender] = balanceOf[msg.sender].add(purchase);\r\n            remaining.sub(purchase);\r\n        }\r\n        else//funding goal has been met, selling extra tokens\r\n        {\r\n            purchase = purchase.mul(ZTR_ETH_extra_price);\r\n            amountRaised = amountRaised.add(msg.value);\r\n            balanceOf[msg.sender] = balanceOf[msg.sender].add(purchase);\r\n            remaining.sub(purchase);\r\n        }\r\n    }\r\n    \r\n    function withdrawBeneficiary() public admin afterDeadline//withdrawl for the ZTrust Foundation\r\n    {\r\n        ZTRToken t = ZTRToken(ZTRTokenContract);\r\n        t.transfer(msg.sender, remaining);\r\n        require(amountRaised >= fundingGoal);//allow admin withdrawl if funding goal is reached and the sale is over\r\n        owner.transfer(amountRaised);\r\n    }\r\n    \r\n    function withdraw() afterDeadline//ETH/ZTR withdrawl for sale participants\r\n    {\r\n        if(amountRaised < fundingGoal)//funding goal was not met, withdraw ETH deposit\r\n        {\r\n            uint ethVal = ethBalance[msg.sender];\r\n            ethBalance[msg.sender] = 0;\r\n            msg.sender.transfer(ethVal);\r\n        }\r\n        else//funding goal was met, withdraw ZTR tokens\r\n        {\r\n            uint tokenVal = balanceOf[msg.sender];\r\n            balanceOf[msg.sender] = 0;\r\n            ZTRToken t = ZTRToken(ZTRTokenContract);\r\n            t.transfer(msg.sender, tokenVal);\r\n        }\r\n    }\r\n    \r\n    function setDeadline(uint ti) public admin//setter\r\n    {\r\n        deadline = ti;\r\n    }\r\n    \r\n    function setStart(uint ti) public admin//setter\r\n    {\r\n        start = ti;\r\n    }\r\n    \r\n    function suicide() public afterUnlock //contract can be destroyed 4 months after the sale ends to save state\r\n    {\r\n        selfdestruct(owner);\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ti\",\"type\":\"uint256\"}],\"name\":\"setDeadline\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ZTR_ETH_extra_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ZTR_ETH_initial_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"suicide\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ti\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "ZTRTokenSale", "CompilerVersion": "v0.4.19+commit.c4cbbb05", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://134561f0460aa76b4da66ce9c396e47b7390a515a9b47974ed174058e347fce4"}]}