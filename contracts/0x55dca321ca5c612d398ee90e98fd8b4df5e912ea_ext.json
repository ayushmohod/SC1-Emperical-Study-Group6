{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0 || b == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"Mul overflow!\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"Sub overflow!\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a, \"Add overflow!\");\r\n        return c;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function transfer(address _to, uint256 _value) external returns(bool);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Only Owner can do that!\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner)\r\n    external onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership()\r\n    external {\r\n        require(msg.sender == newOwner, \"You are not new Owner!\");\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n    }\r\n}\r\n\r\ncontract Permissioned {\r\n\r\n    function approve(address _spender, uint256 _value) public returns(bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns(bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract Burnable {\r\n\r\n    function burn(uint256 _value) external returns(bool);\r\n    function burnFrom(address _from, uint256 _value) external returns(bool);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed _from, uint256 _value);\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract Aligato is ERC20Interface, Owned, Permissioned, Burnable {\r\n\r\n    using SafeMath for uint256; //Be aware of overflows\r\n\r\n    // This creates an array with all balances\r\n    mapping(address => uint256) internal _balanceOf;\r\n\r\n    // This creates an array with all allowance\r\n    mapping(address => mapping(address => uint256)) internal _allowance;\r\n\r\n    bool public isLocked = true; //only contract Owner can transfer tokens\r\n\r\n    uint256 icoSupply = 0;\r\n\r\n    //set ICO balance and emit\r\n    function setICO(address user, uint256 amt) internal{\r\n        uint256 amt2 = amt * (10 ** uint256(decimals));\r\n        _balanceOf[user] = amt2;\r\n        emit Transfer(0x0, user, amt2);\r\n        icoSupply += amt2;\r\n    }\r\n\r\n    // As ICO been done on platform, we need set proper amouts for ppl that participate\r\n   \r\n\r\n    /**\r\n    * Constructor function\r\n    *\r\n    * Initializes contract with initial supply tokens to the creator of the contract\r\n    */\r\n    constructor(string _symbol, string _name, uint256 _supply, uint8 _decimals)\r\n    public {\r\n        require(_supply != 0, \"Supply required!\"); //avoid accidental deplyment with zero balance\r\n        owner = msg.sender;\r\n        symbol = _symbol;\r\n        name = _name;\r\n        decimals = _decimals;\r\n        \r\n        totalSupply = _supply.mul(10 ** uint256(decimals)); //supply in constuctor is w/o decimal zeros\r\n        _balanceOf[msg.sender] = totalSupply - icoSupply;\r\n        emit Transfer(address(0), msg.sender, totalSupply - icoSupply);\r\n    }\r\n\r\n    // unlock transfers for everyone\r\n    function unlock() external onlyOwner returns (bool success)\r\n    {\r\n        require (isLocked == true, \"It is unlocked already!\"); //you can unlock only once\r\n        isLocked = false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Get the token balance for account\r\n    *\r\n    * Get token balance of `_owner` account\r\n    *\r\n    * @param _owner The address of the owner\r\n    */\r\n    function balanceOf(address _owner)\r\n    external view\r\n    returns(uint256 balance) {\r\n        return _balanceOf[_owner];\r\n    }\r\n\r\n    /**\r\n    * Internal transfer, only can be called by this contract\r\n    */\r\n    function _transfer(address _from, address _to, uint256 _value)\r\n    internal {\r\n        // check that contract is unlocked\r\n        require (isLocked == false || _from == owner, \"Contract is locked!\");\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != address(0), \"Can`t send to 0x0, use burn()\");\r\n        // Check if the sender has enough\r\n        require(_balanceOf[_from] >= _value, \"Not enough balance!\");\r\n        // Subtract from the sender\r\n        _balanceOf[_from] = _balanceOf[_from].sub(_value);\r\n        // Add the same to the recipient\r\n        _balanceOf[_to] = _balanceOf[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * Transfer tokens\r\n    *\r\n    * Send `_value` tokens to `_to` from your account\r\n    *\r\n    * @param _to The address of the recipient\r\n    * @param _value the amount to send\r\n    */\r\n    function transfer(address _to, uint256 _value)\r\n    external\r\n    returns(bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Transfer tokens from other address\r\n    *\r\n    * Send `_value` tokens to `_to` on behalf of `_from`\r\n    *\r\n    * @param _from The address of the sender\r\n    * @param _to The address of the recipient\r\n    * @param _value the amount to send\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    external\r\n    returns(bool success) {\r\n        // Check allowance\r\n        require(_value <= _allowance[_from][msg.sender], \"Not enough allowance!\");\r\n        // Check balance\r\n        require(_value <= _balanceOf[_from], \"Not enough balance!\");\r\n        _allowance[_from][msg.sender] = _allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        emit Approval(_from, _to, _allowance[_from][_to]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Set allowance for other address\r\n    *\r\n    * Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n    *\r\n    * @param _spender The address authorized to spend\r\n    * @param _value the max amount they can spend\r\n    */\r\n    function approve(address _spender, uint256 _value)\r\n    public\r\n    returns(bool success) {\r\n        _allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Set allowance for other address and notify\r\n    *\r\n    * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\r\n    *\r\n    * @param _spender The address authorized to spend\r\n    * @param _value the max amount they can spend\r\n    * @param _extraData some extra information to send to the approved contract\r\n    */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n    external\r\n    returns(bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(address _owner, address _spender)\r\n    external view\r\n    returns(uint256 value) {\r\n        return _allowance[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * Destroy tokens\r\n    *\r\n    * Remove `_value` tokens from the system irreversibly\r\n    *\r\n    * @param _value the amount of money to burn\r\n    */\r\n    function burn(uint256 _value)\r\n    external\r\n    returns(bool success) {\r\n        _burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Destroy tokens from other account\r\n    *\r\n    * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n    *\r\n    * @param _from the address of the sender\r\n    * @param _value the amount of money to burn\r\n    */\r\n    function burnFrom(address _from, uint256 _value)\r\n    external\r\n    returns(bool success) {\r\n         // Check allowance\r\n        require(_value <= _allowance[_from][msg.sender], \"Not enough allowance!\");\r\n        // Is tehere enough coins on account\r\n        require(_value <= _balanceOf[_from], \"Insuffient balance!\");\r\n        // Subtract from the sender's allowance\r\n        _allowance[_from][msg.sender] = _allowance[_from][msg.sender].sub(_value);\r\n        _burn(_from, _value);\r\n        emit Approval(_from, msg.sender, _allowance[_from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    function _burn(address _from, uint256 _value)\r\n    internal {\r\n        // Check if the targeted balance is enough\r\n        require(_balanceOf[_from] >= _value, \"Insuffient balance!\");\r\n        // Subtract from the sender\r\n        _balanceOf[_from] = _balanceOf[_from].sub(_value);\r\n        // Updates totalSupply\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n        emit Transfer(_from, address(0), _value);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Don't accept accidental ETH\r\n    // ------------------------------------------------------------------------\r\n    function () external payable {\r\n        revert(\"This contract is not accepting ETH.\");\r\n    }\r\n\r\n    //Owner can take ETH from contract\r\n    function withdraw(uint256 _amount)\r\n    external onlyOwner\r\n    returns (bool){\r\n        require(_amount <= address(this).balance, \"Not enough balance!\");\r\n        owner.transfer(_amount);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint256 _value)\r\n    external onlyOwner\r\n    returns(bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, _value);\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_supply\",\"type\":\"uint256\"},{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "Aligato", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004414c435800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c416c696761746f436f696e580000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://340f8dd5d93328b26b0b2619433b15901bd13e61ffd44c6aed1899a81bb36b95"}]}