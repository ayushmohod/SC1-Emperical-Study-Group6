{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.25;\r\n\r\n/**\r\n  WITH AUTORESTART EVERY 256 BLOCKS!!! / \u0421 \u0410\u0412\u0422\u041e\u0420\u0415\u0421\u0422\u0410\u0420\u0422\u041e\u041c \u041a\u0410\u0416\u0414\u042b\u0415 256 \u0411\u041b\u041e\u041a\u041e\u0412!!!\r\n\r\n  EN:\r\n  Multiplier contract: returns 110-130% of each investment!\r\n\r\n  Automatic payouts!\r\n  No bugs, no backdoors, NO OWNER - fully automatic!\r\n  Made and checked by professionals!\r\n\r\n  1. Send any sum to smart contract address\r\n     - sum from 0.1 ETH\r\n     - min 280000 gas limit\r\n     - you are added to a queue\r\n  2. Wait a little bit\r\n  3. ...\r\n  4. PROFIT! You have got 110-130%\r\n\r\n  How is that?\r\n  1. The first investor in the queue (you will become the\r\n     first in some time) receives next investments until\r\n     it become 110-130% of his initial investment.\r\n  2. You will receive payments in several parts or all at once\r\n  3. Once you receive 110-130% of your initial investment you are\r\n     removed from the queue.\r\n  4. You can make only one active deposit\r\n  5. The balance of this contract should normally be 0 because\r\n     all the money are immediately go to payouts\r\n\r\n\r\n     So the last pays to the first (or to several first ones\r\n     if the deposit big enough) and the investors paid 110-130% are removed from the queue\r\n\r\n                new investor --|               brand new investor --|\r\n                 investor5     |                 new investor       |\r\n                 investor4     |     =======>      investor5        |\r\n                 investor3     |                   investor4        |\r\n    (part. paid) investor2    <|                   investor3        |\r\n    (fully paid) investor1   <-|                   investor2   <----|  (pay until 110-130%)\r\n\r\n    ==> Limits: <==\r\n\r\n    Total invested: up to 20ETH\r\n    Multiplier: 130%\r\n    Maximum deposit: 0.5ETH\r\n\r\n    Total invested: from 20 to 50ETH\r\n    Multiplier: 120%\r\n    Maximum deposit: 0.7ETH\r\n\r\n    Total invested: from 50 to 100ETH\r\n    Multiplier: 115%\r\n    Maximum deposit: 1ETH\r\n\r\n    Total invested: from 100 to 200ETH\r\n    Multiplier: 112%\r\n    Maximum deposit: 1.5ETH\r\n\r\n    Total invested: from 200ETH\r\n    Multiplier: 110%\r\n    Maximum deposit: 2ETH\r\n\r\n    Do not invest at the end of the round\r\n*/\r\n\r\n\r\n/**\r\n\r\n  RU:\r\n  \u041a\u043e\u043d\u0442\u0440\u0430\u043a\u0442 \u0423\u043c\u043d\u043e\u0436\u0438\u0442\u0435\u043b\u044c: \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 110-130% \u043e\u0442 \u0432\u0430\u0448\u0435\u0433\u043e \u0434\u0435\u043f\u043e\u0437\u0438\u0442\u0430!\r\n\r\n  \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u044b\u043f\u043b\u0430\u0442\u044b!\r\n  \u0411\u0435\u0437 \u043e\u0448\u0438\u0431\u043e\u043a, \u0434\u044b\u0440, \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 - \u0434\u043b\u044f \u0432\u044b\u043f\u043b\u0430\u0442 \u041d\u0415 \u041d\u0423\u0416\u041d\u0410 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f!\r\n  \u0421\u043e\u0437\u0434\u0430\u043d \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u043e\u043d\u0430\u043b\u0430\u043c\u0438!\r\n\r\n  1. \u041f\u043e\u0448\u043b\u0438\u0442\u0435 \u043b\u044e\u0431\u0443\u044e \u043d\u0435\u043d\u0443\u043b\u0435\u0432\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u043d\u0430 \u0430\u0434\u0440\u0435\u0441 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430\r\n     - \u0441\u0443\u043c\u043c\u0430 \u043e\u0442 0.1 ETH\r\n     - gas limit \u043c\u0438\u043d\u0438\u043c\u0443\u043c 280000\r\n     - \u0432\u044b \u0432\u0441\u0442\u0430\u043d\u0435\u0442\u0435 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c\r\n  2. \u041d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u043e\u0436\u0434\u0438\u0442\u0435\r\n  3. ...\r\n  4. PROFIT! \u0412\u0430\u043c \u043f\u0440\u0438\u0448\u043b\u043e 110-130% \u043e\u0442 \u0432\u0430\u0448\u0435\u0433\u043e \u0434\u0435\u043f\u043e\u0437\u0438\u0442\u0430.\r\n\r\n  \u041a\u0430\u043a \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e?\r\n  1. \u041f\u0435\u0440\u0432\u044b\u0439 \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 (\u0432\u044b \u0441\u0442\u0430\u043d\u0435\u0442\u0435 \u043f\u0435\u0440\u0432\u044b\u043c \u043e\u0447\u0435\u043d\u044c \u0441\u043a\u043e\u0440\u043e) \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0432\u044b\u043f\u043b\u0430\u0442\u044b \u043e\u0442\r\n     \u043d\u043e\u0432\u044b\u0445 \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440\u043e\u0432 \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442 110-130% \u043e\u0442 \u0441\u0432\u043e\u0435\u0433\u043e \u0434\u0435\u043f\u043e\u0437\u0438\u0442\u0430\r\n  2. \u0412\u044b\u043f\u043b\u0430\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u0447\u0430\u0441\u0442\u044f\u043c\u0438 \u0438\u043b\u0438 \u0432\u0441\u0435 \u0441\u0440\u0430\u0437\u0443\r\n  3. \u041a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 110-130% \u043e\u0442 \u0432\u0430\u0448\u0435\u0433\u043e \u0434\u0435\u043f\u043e\u0437\u0438\u0442\u0430, \u0432\u044b \u0443\u0434\u0430\u043b\u044f\u0435\u0442\u0435\u0441\u044c \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0438\r\n  4. \u0423 \u0432\u0430\u0441 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0432\u043a\u043b\u0430\u0434\r\n  5. \u0411\u0430\u043b\u0430\u043d\u0441 \u044d\u0442\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u0431\u044b\u0447\u043d\u043e \u0431\u044b\u0442\u044c \u0432 \u0440\u0430\u0439\u043e\u043d\u0435 0, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0432\u0441\u0435 \u043f\u043e\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f\r\n     \u0441\u0440\u0430\u0437\u0443 \u0436\u0435 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u0430 \u0432\u044b\u043f\u043b\u0430\u0442\u044b\r\n\r\n     \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u043f\u043b\u0430\u0442\u044f\u0442 \u043f\u0435\u0440\u0432\u044b\u043c, \u0438 \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440\u044b, \u0434\u043e\u0441\u0442\u0438\u0433\u0448\u0438\u0435 \u0432\u044b\u043f\u043b\u0430\u0442 110-130% \u043e\u0442 \u0434\u0435\u043f\u043e\u0437\u0438\u0442\u0430,\r\n     \u0443\u0434\u0430\u043b\u044f\u044e\u0442\u0441\u044f \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0438, \u0443\u0441\u0442\u0443\u043f\u0430\u044f \u043c\u0435\u0441\u0442\u043e \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c\r\n\r\n              \u043d\u043e\u0432\u044b\u0439 \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440 --|            \u0441\u043e\u0432\u0441\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440 --|\r\n                 \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u04405     |                \u043d\u043e\u0432\u044b\u0439 \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440      |\r\n                 \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u04404     |     =======>      \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u04405        |\r\n                 \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u04403     |                   \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u04404        |\r\n (\u0447\u0430\u0441\u0442. \u0432\u044b\u043f\u043b\u0430\u0442\u0430) \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u04402    <|                   \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u04403        |\r\n(\u043f\u043e\u043b\u043d\u0430\u044f \u0432\u044b\u043f\u043b\u0430\u0442\u0430) \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u04401   <-|                   \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u04402   <----|  (\u0434\u043e\u043f\u043b\u0430\u0442\u0430 \u0434\u043e 110-130%)\r\n\r\n    ==> \u041b\u0438\u043c\u0438\u0442\u044b: <==\r\n\r\n    \u0412\u0441\u0435\u0433\u043e \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043e: \u0434\u043e 20ETH\r\n    \u041f\u0440\u043e\u0444\u0438\u0442: 130%\r\n    \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u043a\u043b\u0430\u0434: 0.5ETH\r\n\r\n    \u0412\u0441\u0435\u0433\u043e \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043e: \u043e\u0442 20 \u0434\u043e 50ETH\r\n    \u041f\u0440\u043e\u0444\u0438\u0442: 120%\r\n    \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u043a\u043b\u0430\u0434: 0.7ETH\r\n\r\n    \u0412\u0441\u0435\u0433\u043e \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043e: \u043e\u0442 50 \u0434\u043e 100ETH\r\n    \u041f\u0440\u043e\u0444\u0438\u0442: 115%\r\n    \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u043a\u043b\u0430\u0434: 1ETH\r\n\r\n    \u0412\u0441\u0435\u0433\u043e \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043e: \u043e\u0442 100 \u0434\u043e 200ETH\r\n    \u041f\u0440\u043e\u0444\u0438\u0442: 112%\r\n    \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u043a\u043b\u0430\u0434: 1.5ETH\r\n\r\n    \u0412\u0441\u0435\u0433\u043e \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043e: \u0431\u043e\u043b\u0435\u0435 200ETH\r\n    \u041f\u0440\u043e\u0444\u0438\u0442: 110%\r\n    \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u043a\u043b\u0430\u0434: 2ETH\r\n\r\n    \u041d\u0435 \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0440\u0430\u0443\u043d\u0434\u0430\r\n\r\n*/\r\ncontract EternalMultiplier {\r\n\r\n    //The deposit structure holds all the info about the deposit made\r\n    struct Deposit {\r\n        address depositor; // The depositor address\r\n        uint deposit;   // The deposit amount\r\n        uint payout; // Amount already paid\r\n    }\r\n\r\n    uint public roundDuration = 256;\r\n    \r\n    mapping (uint => Deposit[]) public queue;  // The queue\r\n    mapping (uint => mapping (address => uint)) public depositNumber; // investor deposit index\r\n    mapping (uint => uint) public currentReceiverIndex; // The index of the depositor in the queue\r\n    mapping (uint => uint) public totalInvested; // Total invested amount\r\n\r\n    address public support = msg.sender;\r\n    mapping (uint => uint) public amountForSupport;\r\n\r\n    //This function receives all the deposits\r\n    //stores them and make immediate payouts\r\n    function () public payable {\r\n        require(block.number >= 6617925);\r\n        require(block.number % roundDuration < roundDuration - 20);\r\n        uint stage = block.number / roundDuration;\r\n\r\n        if(msg.value > 0){\r\n\r\n            require(gasleft() >= 250000); // We need gas to process queue\r\n            require(msg.value >= 0.1 ether && msg.value <= calcMaxDeposit(stage)); // Too small and too big deposits are not accepted\r\n            require(depositNumber[stage][msg.sender] == 0); // Investor should not already be in the queue\r\n\r\n            // Add the investor into the queue\r\n            queue[stage].push( Deposit(msg.sender, msg.value, 0) );\r\n            depositNumber[stage][msg.sender] = queue[stage].length;\r\n\r\n            totalInvested[stage] += msg.value;\r\n\r\n            // No more than 5 ETH per stage can be sent to support the project\r\n            if (amountForSupport[stage] < 5 ether) {\r\n                uint fee = msg.value / 5;\r\n                amountForSupport[stage] += fee;\r\n                support.transfer(fee);\r\n            }\r\n\r\n            // Pay to first investors in line\r\n            pay(stage);\r\n\r\n        }\r\n    }\r\n\r\n    // Used to pay to current investors\r\n    // Each new transaction processes 1 - 4+ investors in the head of queue\r\n    // depending on balance and gas left\r\n    function pay(uint stage) internal {\r\n\r\n        uint money = address(this).balance;\r\n        uint multiplier = calcMultiplier(stage);\r\n\r\n        // We will do cycle on the queue\r\n        for (uint i = 0; i < queue[stage].length; i++){\r\n\r\n            uint idx = currentReceiverIndex[stage] + i;  //get the index of the currently first investor\r\n\r\n            Deposit storage dep = queue[stage][idx]; // get the info of the first investor\r\n\r\n            uint totalPayout = dep.deposit * multiplier / 100;\r\n            uint leftPayout;\r\n\r\n            if (totalPayout > dep.payout) {\r\n                leftPayout = totalPayout - dep.payout;\r\n            }\r\n\r\n            if (money >= leftPayout) { //If we have enough money on the contract to fully pay to investor\r\n\r\n                if (leftPayout > 0) {\r\n                    dep.depositor.send(leftPayout); // Send money to him\r\n                    money -= leftPayout;\r\n                }\r\n\r\n                // this investor is fully paid, so remove him\r\n                depositNumber[stage][dep.depositor] = 0;\r\n                delete queue[stage][idx];\r\n\r\n            } else{\r\n\r\n                // Here we don't have enough money so partially pay to investor\r\n                dep.depositor.send(money); // Send to him everything we have\r\n                dep.payout += money;       // Update the payout amount\r\n                break;                     // Exit cycle\r\n\r\n            }\r\n\r\n            if (gasleft() <= 55000) {         // Check the gas left. If it is low, exit the cycle\r\n                break;                       // The next investor will process the line further\r\n            }\r\n        }\r\n\r\n        currentReceiverIndex[stage] += i; //Update the index of the current first investor\r\n    }\r\n\r\n    // Get current queue size\r\n    function getQueueLength() public view returns (uint) {\r\n        uint stage = block.number / roundDuration;\r\n        return queue[stage].length - currentReceiverIndex[stage];\r\n    }\r\n\r\n    // Get max deposit for your investment\r\n    function calcMaxDeposit(uint stage) public view returns (uint) {\r\n\r\n        if (totalInvested[stage] <= 20 ether) {\r\n            return 0.5 ether;\r\n        } else if (totalInvested[stage] <= 50 ether) {\r\n            return 0.7 ether;\r\n        } else if (totalInvested[stage] <= 100 ether) {\r\n            return 1 ether;\r\n        } else if (totalInvested[stage] <= 200 ether) {\r\n            return 1.5 ether;\r\n        } else {\r\n            return 2 ether;\r\n        }\r\n\r\n    }\r\n\r\n    // How many percent for your deposit to be multiplied at now\r\n    function calcMultiplier(uint stage) public view returns (uint) {\r\n\r\n        if (totalInvested[stage] <= 20 ether) {\r\n            return 130;\r\n        } else if (totalInvested[stage] <= 50 ether) {\r\n            return 120;\r\n        } else if (totalInvested[stage] <= 100 ether) {\r\n            return 115;\r\n        } else if (totalInvested[stage] <= 200 ether) {\r\n            return 112;\r\n        } else {\r\n            return 110;\r\n        }\r\n\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"support\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"payout\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentReceiverIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"calcMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"calcMaxDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amountForSupport\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getQueueLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "EternalMultiplier", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://c0585dbe754419c092efcb0e16d203f61222cf47da92eebd4bfb0e33142bc6ca"}]}