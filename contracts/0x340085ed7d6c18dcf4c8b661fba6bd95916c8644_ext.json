{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity >=0.4.22 <0.6.0;\r\n\t\r\n\r\n\tcontract owned {\r\n\t    address public owner;\r\n\t\r\n\r\n\t    constructor() public {\r\n\t        owner = msg.sender;\r\n\t    }\r\n\t\r\n\r\n\t    modifier onlyOwner {\r\n\t        require(msg.sender == owner);\r\n\t        _;\r\n\t    }\r\n\t\r\n\r\n\t    function transferOwnership(address newOwner) onlyOwner public {\r\n\t        owner = newOwner;\r\n\t    }\r\n\t}\r\n\t\r\n\r\n\tinterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; \r\n\t\r\n\r\n\t}\r\n\tcontract BoostPax {\r\n\t    // Public variables of the token\r\n\t    string public name;\r\n\t    string public symbol;\r\n\t    uint8 public decimals = 18;\r\n\t    // 18 decimals is the strongly suggested default, avoid changing it\r\n\t    uint256 public totalSupply;\r\n\t\r\n\r\n\t    // This creates an array with all balances\r\n\t    mapping (address => uint256) public balanceOf;\r\n\t    mapping (address => mapping (address => uint256)) public allowance;\r\n\t    mapping (address => bool) public frozenAccount;\r\n\t\r\n\r\n\t    // This generates a public event on the blockchain that will notify clients\r\n\t    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\t    \r\n\t    // This generates a public event on the blockchain that will notify clients\r\n\t    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\t\r\n\r\n\t    // This notifies clients about the amount burnt\r\n\t    event Burn(address indexed from, uint256 value);\r\n\t\r\n\r\n\t    /**\r\n\t     * Constructor function\r\n\t     *\r\n\t     * Initializes contract with initial supply tokens to the creator of the contract\r\n\t     */\r\n\t    constructor(\r\n\t\r\n\r\n\t    ) public {\r\n\t        totalSupply = 100000000 * 10 ** uint256(18);  // Update total supply with the decimal amount\r\n\t        balanceOf[msg.sender] = totalSupply;                    // Give the creator all initial tokens\r\n\t        name = \"BoostPax\";                                       // Set the name for display purposes\r\n\t        symbol = \"BPX\";                                   // Set the symbol for display purposes\r\n\t    }\r\n\t\r\n\r\n\t    /**\r\n\t     * Internal transfer, only can be called by this contract\r\n\t     */\r\n\t    function _transfer(address _from, address _to, uint _value) internal {\r\n\t        // Prevent transfer to 0x0 address. Use burn() instead\r\n\t        require(_to != address(0x0));\r\n\t        // Check if the sender has enough\r\n\t        require(balanceOf[_from] >= _value);\r\n\t        // Check for overflows\r\n\t        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n\t        // Save this for an assertion in the future\r\n\t        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\t        // Subtract from the sender\r\n\t        balanceOf[_from] -= _value;\r\n\t        // Add the same to the recipient\r\n\t        balanceOf[_to] += _value;\r\n\t        emit Transfer(_from, _to, _value);\r\n\t        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n\t        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n\t    }\r\n\t\r\n\r\n\t    /**\r\n\t     * Transfer tokens\r\n\t     *\r\n\t     * Send `_value` tokens to `_to` from your account\r\n\t     *\r\n\t     * @param _to The address of the recipient\r\n\t     * @param _value the amount to send\r\n\t     */\r\n\t    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n\t        _transfer(msg.sender, _to, _value);\r\n\t        return true;\r\n\t    }\r\n\t\r\n\r\n\t    /**\r\n\t     * Transfer tokens from other address\r\n\t     *\r\n\t     * Send `_value` tokens to `_to` in behalf of `_from`\r\n\t     *\r\n\t     * @param _from The address of the sender\r\n\t     * @param _to The address of the recipient\r\n\t     * @param _value the amount to send\r\n\t     */\r\n\t    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\t        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n\t        allowance[_from][msg.sender] -= _value;\r\n\t        _transfer(_from, _to, _value);\r\n\t        return true;\r\n\t    }\r\n\t\r\n\r\n\t    /**\r\n\t     * Set allowance for other address\r\n\t     *\r\n\t     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n\t     *\r\n\t     * @param _spender The address authorized to spend\r\n\t     * @param _value the max amount they can spend\r\n\t     */\r\n\t    function approve(address _spender, uint256 _value) public\r\n\t        returns (bool success) {\r\n\t        allowance[msg.sender][_spender] = _value;\r\n\t        emit Approval(msg.sender, _spender, _value);\r\n\t        return true;\r\n\t    }\r\n\t\r\n\r\n\t    /**\r\n\t     * Set allowance for other address and notify\r\n\t     *\r\n\t     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n\t     *\r\n\t     * @param _spender The address authorized to spend\r\n\t     * @param _value the max amount they can spend\r\n\t     * @param _extraData some extra information to send to the approved contract\r\n\t     */\r\n\t    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\r\n\t        public\r\n\t        returns (bool success) {\r\n\t        tokenRecipient spender = tokenRecipient(_spender);\r\n\t        if (approve(_spender, _value)) {\r\n\t            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n\t            return true;\r\n\t        }\r\n\t    }\r\n\t\r\n\r\n\t    /**\r\n\t     * Destroy tokens\r\n\t     *\r\n\t     * Remove `_value` tokens from the system irreversibly\r\n\t     *\r\n\t     * @param _value the amount of money to burn\r\n\t     */\r\n\t    function burn(uint256 _value) public returns (bool success) {\r\n\t        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n\t        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n\t        totalSupply -= _value;                      // Updates totalSupply\r\n\t        emit Burn(msg.sender, _value);\r\n\t        return true;\r\n\t    }\r\n\t\r\n\t    /**\r\n\t     * Destroy tokens from other account\r\n\t     *\r\n\t     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n\t     *\r\n\t     * @param _from the address of the sender\r\n\t     * @param _value the amount of money to burn\r\n\t     */\r\n\t    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n\t        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n\t        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n\t        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n\t        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n\t        totalSupply -= _value;                              // Update totalSupply\r\n\t        emit Burn(_from, _value);\r\n\t        return true;\r\n\t    }\r\n\t}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]", "ContractName": "BoostPax", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://e7251068c5ebd35d64709d1d6929983b318ac17c049fb22827676fd1bbf99509"}]}